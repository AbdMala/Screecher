from os import path, listdir

from django.core.files.storage import FileSystemStorage
from django.db import connections, DEFAULT_DB_ALIAS
from django.db.migrations.executor import MigrationExecutor
from django.http import HttpResponse

from screecher.settings import APP_NAMES, BASE_DIR, MEDIA_ROOT


def error_status(status, reason=''):
    if not reason:
        return HttpResponse(status=status)
    else:
        return HttpResponse(status=status, reason=reason)


def save_media_file(app, _id, file):
    storage = FileSystemStorage(location=f"{MEDIA_ROOT}/{app}")
    storage.delete(str(_id))
    storage.save(str(_id), file)


def delete_media_file(app, _id):
    storage = FileSystemStorage(location=f"{MEDIA_ROOT}/{app}")
    storage.delete(str(_id))


def exists_media_file(app, _id):
    storage = FileSystemStorage(location=f"{MEDIA_ROOT}/{app}")
    return storage.exists(str(_id))


def _migration_missing(migrations_path):
    if path.isdir(migrations_path):
        for migration in filter(lambda m: m.startswith('0'), listdir(migrations_path)):
            with open(path.join(migrations_path, migration)) as migration_file:
                if migration_file.readline().startswith('# Generated by Django'):
                    return False
    return True


def get_missing_migrations():
    missing_migrations = []
    for app in APP_NAMES:
        app_path = path.join(BASE_DIR, app)
        if 'models.py' in listdir(app_path):
            with open(path.join(app_path, 'models.py')) as file:
                for line in file:
                    if line.startswith('class '):
                        if _migration_missing(path.join(app_path, 'migrations')):
                            missing_migrations.append(app)
                        break
    return missing_migrations


def migrations_applied():
    connection = connections[DEFAULT_DB_ALIAS]
    connection.prepare_database()
    executor = MigrationExecutor(connection)
    targets = executor.loader.graph.leaf_nodes()
    return not executor.migration_plan(targets)
